"""
Django settings for website_configs project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&zw0sh_l73bpuh7ez_ym3i0%m8+0b+3-dj6i-mi1#0%o3i1f89'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'channels',
    'daphne',
    'axes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app_owner_admin_panel',
    'app_staff_dashboard',
    'app_customer_interface',
]

ASGI_APPLICATION = 'website_configs.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', 6379)],  # Use your Redis server configuration
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Replace with your Redis server info
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'app_customer_interface.middleware.DecryptTableNumberMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'app_owner_admin_panel.middleware.SystemStatusMiddleware',
    'app_owner_admin_panel.middleware.AutoLogoutMiddleware',
    'app_owner_admin_panel.middleware.WhitelistMiddleware',
    'app_customer_interface.middleware.TimezoneMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',    
]

# settings.py

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

TIME_ZONE = 'Asia/Taipei'
USE_TZ = True
USE_I18N = True

ROOT_URLCONF = 'website_configs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'app_owner_admin_panel.context_processor.axes_cooloff',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'website_configs.wsgi.application'

# Static files (CSS, JavaScript, Images)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'orderingweb', #ordering_system
#         'USER': 'admin', #'root',
#         'PASSWORD': 'JNEm65@Rsi',#'mysql789456123',
#         'HOST': 'localhost',  # or the MySQL server IP address
#         'PORT': '',           # Leave empty to use the default MySQL port (3306)
#         "OPTIONS": {
#             "charset": "utf8mb4",
#         },
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'orderingweb_sample',
        'USER': 'root',
        'PASSWORD': 'mysql789456123',
        'HOST': 'localhost',
        'PORT': '',
        "OPTIONS": {
            "charset": "utf8mb4",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'Asia/Taipei'
# TIME_ZONE = 'UTC'
# TIME_ZONE = 'Asia/Phnom_Penh' //Cambodia
# USE_L10N = True
# USE_I18N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'productionfiles/')

# STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# def exponential_backoff_cooloff(credentials):
#     # Retrieve the number of consecutive failures from credentials
#     retries = credentials.get('failures', 1)
#     return cooloff_base * (2 ** retries)

# Django Axes Settings
AXES_FAILURE_LIMIT = 3  # Number of login failures allowed before lockout
AXES_LOCK_OUT_AT_FAILURE = True  # Lock out user after failures exceed AXES_FAILURE_LIMIT
AXES_RESET_ON_SUCCESS = True
AXES_COOLOFF_TIME = 0.002
AXES_LOCKOUT_TEMPLATE = 'app_owner_admin_panel/lockout.html'  # Create a custom lockout template
# AXES_COOLOFF_TIME = lambda request, credentials: exponential_backoff_cooloff(credentials.get('failures', 1))

